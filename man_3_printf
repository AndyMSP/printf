NAME

	_printf - formated output conversion

SYNOPSIS

#include main.h

int _printf(const char *format, ...);

long int _pow(long int base, long int exp);

printable char2str(va_list, char);

printable int2str(va_list, char);

printable str2str(va_list, char);

printable mod2str(va_list, char);

printable mis2str(va_list, char);

typedef struct str_and_len
{
	char *str;
	int len;

} printable;

typedef struct conversions
{
	char spec;
	printable (*f)(va_list, char);

} con_type


DESCRIPTION

	The _printf function produce an output acording to a format as described below. The function _printf write an output to stdout, the standard output stream.

	All of these functions write the output under the control of a format string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of stdarg(3)) are converted for output.



FORMAT OF THE FORMAT STRING

	 The format string is a character string, beginning and ending in its initial shift state, if any.  The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.  Each conversion specification is introduced by the character %, and ends with a conversion specifier.  In between there may be (in this order) zero or more flags, an optional minimum field width, an optional precision and an optional length modifier.


	The overall syntax of a conversion specification is:
		
		%conversion


CONVERSION SPECIFIERS

	A character list specifies the type of conversion to be applied.

	d, i 
		The int argument is converted to signed decimal notation.
		The precision, if any, gives the minimum number of digits
		that must appear; if the converted value requires fewer
		digits, it is padded on the left with zeros.  The default
		precision is 1.  When 0 is printed with an explicit
		precision 0, the output is empty.

   c

        If no l modifier is present, the int argument is converted
        to an unsigned char, and the resulting character is
        written.  If an l modifier is present, the wint_t (wide
		   character) argument is converted to a multibyte sequence
        by a call to the wcrtomb(3) function, with a conversion
        state starting in the initial state, and the resulting
        multibyte string is written.


	s


		If no l modifier is present: the const char * argument is
		expected to be a pointer to an array of character type
		(pointer to a string).  Characters from the array are
		written up to (but not including) a terminating null byte
		('\0'); if a precision is specified, no more than the
		number specified are written.  If a precision is given, no
		null byte need be present; if the precision is not
		specified, or is greater than the size of the array, the
		array must contain a terminating null byte.


	%


		A '%' is written.  No argument is converted.  The complete
		conversion specification is '%%'.


RETURN VALUE

	 Upon successful return, these functions return the number of
	 characters printed (excluding the null byte used to end output to strings).


